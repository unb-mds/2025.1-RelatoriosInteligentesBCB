"""
ML Core Interpreter - Insight Generator
M√≥dulo respons√°vel pela gera√ß√£o inteligente de insights econ√¥micos

Author: Assistant
Version: 1.1.0
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

from .config import get_indicator_name, get_indicator_config, ANALYSIS_CONFIG

class InsightGenerator:
    """
    Classe respons√°vel pela gera√ß√£o inteligente de insights
    """
    
    def __init__(self):
        self.config = ANALYSIS_CONFIG['insights']
        self.max_insights = self.config['max_insights']
        self.min_confidence = self.config['min_confidence']
        
    def generate(self, indicator: str, data: pd.DataFrame, 
                trend_analysis: Dict[str, any]) -> List[str]:
        """
        Gera insights inteligentes para um indicador espec√≠fico
        
        Args:
            indicator: Nome do indicador
            data: DataFrame com dados hist√≥ricos
            trend_analysis: Resultado da an√°lise de tend√™ncia
            
        Returns:
            List[str]: Lista de insights formatados
        """
        if data.empty:
            return ["üìä Dados insuficientes para gerar insights abrangentes."]
        
        insights = []
        indicator_name = get_indicator_name(indicator)
        
        # 1. Insights sobre tend√™ncia principal
        insights.extend(self._generate_trend_insights(indicator, indicator_name, trend_analysis))
        
        # 2. Insights sobre volatilidade
        insights.extend(self._generate_volatility_insights(indicator_name, trend_analysis))
        
        # 3. Insights espec√≠ficos por indicador
        insights.extend(self._generate_indicator_specific_insights(indicator, trend_analysis, data))
        
        # 4. Insights sobre padr√µes sazonais
        insights.extend(self._generate_seasonal_insights(indicator_name, trend_analysis))
        
        # 5. Insights sobre outliers
        insights.extend(self._generate_outlier_insights(indicator_name, data))
        
        # 6. Insights de contexto econ√¥mico
        insights.extend(self._generate_economic_context_insights(indicator, trend_analysis))
        
        # Limitar n√∫mero de insights e ordenar por relev√¢ncia
        return self._prioritize_insights(insights)[:self.max_insights]
    
    def _generate_trend_insights(self, indicator: str, indicator_name: str, 
                                trend_analysis: Dict[str, any]) -> List[str]:
        """Gera insights sobre a tend√™ncia principal"""
        insights = []
        
        direction = trend_analysis.get('direction', 'N/A')
        confidence = trend_analysis.get('confidence', 0)
        strength = trend_analysis.get('trend_strength', 'Indefinida')
        change_pct = trend_analysis.get('change_pct', 0)
        significance = trend_analysis.get('trend_significance', 'Baixa')
        
        # Insight principal sobre tend√™ncia
        if confidence > 0.7:
            if direction == 'Crescente':
                insights.append(
                    f"üìà **Tend√™ncia Ascendente {strength}:** {indicator_name} apresenta crescimento "
                    f"consistente ({change_pct:+.2f}%) com {significance.lower()} confiabilidade "
                    f"({confidence:.1%}). Padr√£o bem estabelecido para planejamento estrat√©gico."
                )
            elif direction == 'Decrescente':
                insights.append(
                    f"üìâ **Tend√™ncia Descendente {strength}:** {indicator_name} em trajet√≥ria de queda "
                    f"({change_pct:+.2f}%) com {significance.lower()} confiabilidade "
                    f"({confidence:.1%}). Requer aten√ß√£o e poss√≠veis interven√ß√µes."
                )
            else:  # Est√°vel
                insights.append(
                    f"üìä **Estabilidade Confirmada:** {indicator_name} mant√©m comportamento est√°vel "
                    f"({change_pct:+.2f}%) com {significance.lower()} confiabilidade. "
                    f"Cen√°rio favor√°vel para previsibilidade."
                )
        elif confidence > 0.4:
            insights.append(
                f"‚ö†Ô∏è **Tend√™ncia Incerta:** {indicator_name} apresenta sinais mistos "
                f"(confian√ßa: {confidence:.1%}). Per√≠odo de transi√ß√£o ou influ√™ncias externas "
                f"podem estar afetando o comportamento do indicador."
            )
        else:
            insights.append(
                f"‚ùì **Comportamento Irregular:** {indicator_name} sem padr√£o claro "
                f"(confian√ßa: {confidence:.1%}). An√°lise adicional necess√°ria para "
                f"compreender as for√ßas que influenciam este indicador."
            )
        
        # Insight sobre consist√™ncia da tend√™ncia
        consistency = trend_analysis.get('trend_consistency', 'N/A')
        recent_direction = trend_analysis.get('recent_direction', 'N/A')
        
        if consistency == 'Revers√£o' and confidence > 0.5:
            insights.append(
                f"üîÑ **Mudan√ßa de Dire√ß√£o:** {indicator_name} mostra sinais de revers√£o "
                f"recente. Tend√™ncia geral {direction.lower()}, mas movimento recente "
                f"{recent_direction.lower()}. Monitoramento intensivo recomendado."
            )
        elif consistency == 'Consistente' and confidence > 0.6:
            insights.append(
                f"‚úÖ **Padr√£o Consistente:** {indicator_name} mant√©m dire√ß√£o {direction.lower()} "
                f"tanto no per√≠odo geral quanto recentemente. Alta previsibilidade."
            )
        
        return insights
    
    def _generate_volatility_insights(self, indicator_name: str, 
                                    trend_analysis: Dict[str, any]) -> List[str]:
        """Gera insights sobre volatilidade"""
        insights = []
        
        volatility = trend_analysis.get('volatility', 0)
        volatility_level = trend_analysis.get('volatility_level', 'N/A')
        volatility_trend = trend_analysis.get('volatility_trend', 'N/A')
        
        if volatility > 25:
            insights.append(
                f"üåä **Volatilidade Extrema:** {indicator_name} com varia√ß√µes de {volatility:.1f}%. "
                f"Per√≠odo excepcional que dificulta planejamento e requer gest√£o ativa de risco. "
                f"Considere fatores externos que podem estar causando instabilidade."
            )
        elif volatility > 15:
            insights.append(
                f"‚ö° **Alta Volatilidade:** {indicator_name} com varia√ß√µes significativas "
                f"({volatility:.1f}%). Monitoramento frequente e estrat√©gias flex√≠veis "
                f"recomendadas para lidar com a incerteza."
            )
        elif volatility < 3:
            insights.append(
                f"üéØ **Estabilidade Excepcional:** {indicator_name} muito previs√≠vel "
                f"({volatility:.1f}%). Ambiente ideal para planejamento de longo prazo "
                f"e investimentos que dependem de estabilidade."
            )
        elif volatility < 8:
            insights.append(
                f"‚úÖ **Volatilidade Controlada:** {indicator_name} com varia√ß√µes normais "
                f"({volatility:.1f}%). Comportamento dentro do esperado para este tipo "
                f"de indicador econ√¥mico."
            )
        
        # Insight sobre tend√™ncia da volatilidade
        if volatility_trend == 'Aumentando':
            insights.append(
                f"üìà **Instabilidade Crescente:** A volatilidade de {indicator_name} est√° "
                f"aumentando, sugerindo per√≠odo de maior incerteza √† frente."
            )
        elif volatility_trend == 'Diminuindo':
            insights.append(
                f"üìâ **Estabiliza√ß√£o:** A volatilidade de {indicator_name} est√° diminuindo, "
                f"indicando movimento em dire√ß√£o a maior previsibilidade."
            )
        
        return insights
    
    def _generate_indicator_specific_insights(self, indicator: str, 
                                            trend_analysis: Dict[str, any], 
                                            data: pd.DataFrame) -> List[str]:
        """Gera insights espec√≠ficos para cada tipo de indicador"""
        insights = []
        
        direction = trend_analysis.get('direction', 'N/A')
        confidence = trend_analysis.get('confidence', 0)
        last_value = trend_analysis.get('last_value', 0)
        change_pct = trend_analysis.get('change_pct', 0)
        
        if indicator == 'ipca':
            insights.extend(self._ipca_specific_insights(last_value, direction, confidence, change_pct))
        elif indicator == 'selic':
            insights.extend(self._selic_specific_insights(last_value, direction, confidence, change_pct))
        elif indicator == 'pib':
            insights.extend(self._pib_specific_insights(direction, confidence, change_pct))
        elif indicator == 'cambio_dolar':
            insights.extend(self._cambio_specific_insights(last_value, direction, change_pct))
        elif indicator == 'divida_pib':
            insights.extend(self._divida_specific_insights(last_value, direction, confidence))
        
        return insights
    
    def _ipca_specific_insights(self, last_value: float, direction: str, 
                               confidence: float, change_pct: float) -> List[str]:
        """Insights espec√≠ficos para IPCA"""
        insights = []
        
        if last_value > 7.5:
            insights.append(
                "üö® **Infla√ß√£o Cr√≠tica:** IPCA muito acima da meta! Risco de desancoragem "
                "das expectativas e necessidade de a√ß√£o emergencial do Banco Central."
            )
        elif last_value > 6.5:
            insights.append(
                "‚ö†Ô∏è **Alerta Inflacion√°rio:** IPCA acima do teto da meta (6,5%). "
                "BC provavelmente precisar√° apertar pol√≠tica monet√°ria mais agressivamente."
            )
        elif last_value < 2.5:
            insights.append(
                "‚ùÑÔ∏è **Defla√ß√£o/Desinfla√ß√£o:** IPCA muito baixo pode indicar recess√£o "
                "ou demanda fraca na economia. Risco de defla√ß√£o se persistir."
            )
        elif 3.0 <= last_value <= 6.0:
            insights.append(
                "üéØ **Meta Inflacion√°ria Atingida:** IPCA dentro do intervalo-meta (3-6%). "
                "Pol√≠tica monet√°ria demonstrando efic√°cia no controle de pre√ßos."
            )
        
        # Insights sobre din√¢mica inflacion√°ria
        if direction == 'Crescente' and confidence > 0.6:
            insights.append(
                "üìà **Press√£o Inflacion√°ria Crescente:** Tend√™ncia consistente de alta "
                "pode exigir resposta mais agressiva da pol√≠tica monet√°ria."
            )
        elif direction == 'Decrescente' and confidence > 0.6:
            insights.append(
                "üìâ **Desinfla√ß√£o em Curso:** Queda consistente da infla√ß√£o indica "
                "efic√°cia das medidas de controle ou desaquecimento econ√¥mico."
            )
        
        return insights
    
    def _selic_specific_insights(self, last_value: float, direction: str, 
                               confidence: float, change_pct: float) -> List[str]:
        """Insights espec√≠ficos para SELIC"""
        insights = []
        
        if last_value > 13:
            insights.append(
                "üìä **Juros Muito Elevados:** SELIC em patamar restritivo pode frear "
                "crescimento econ√¥mico significativamente. Impacto no cr√©dito e investimentos."
            )
        elif last_value > 10:
            insights.append(
                "‚¨ÜÔ∏è **Juros Altos:** SELIC em n√≠vel restritivo para combater infla√ß√£o "
                "ou atrair capital estrangeiro. Press√£o sobre atividade econ√¥mica."
            )
        elif last_value < 4:
            insights.append(
                "üí∞ **Juros Baixos:** SELIC em n√≠vel estimulativo favorece crescimento "
                "econ√¥mico e cr√©dito, mas requer vigil√¢ncia inflacion√°ria."
            )
        elif 4 <= last_value <= 8:
            insights.append(
                "‚öñÔ∏è **Juros Neutros:** SELIC em faixa que n√£o estimula nem restringe "
                "significativamente a economia."
            )
        
        # Insights sobre ciclo de pol√≠tica monet√°ria
        if direction == 'Crescente' and confidence > 0.6:
            if abs(change_pct) > 20:
                insights.append(
                    "üìà **Ciclo Agressivo de Aperto:** BC em alta intensa de juros. "
                    "Impacto negativo significativo no crescimento esperado."
                )
            else:
                insights.append(
                    "üìà **Aperto Monet√°rio:** BC elevando juros gradualmente para "
                    "controlar infla√ß√£o. Monitorar impactos na atividade."
                )
        elif direction == 'Decrescente' and confidence > 0.6:
            insights.append(
                "üìâ **Ciclo de Corte:** BC reduzindo juros - sinaliza confian√ßa "
                "no controle inflacion√°rio e foco no crescimento."
            )
        
        return insights
    
    def _pib_specific_insights(self, direction: str, confidence: float, 
                             change_pct: float) -> List[str]:
        """Insights espec√≠ficos para PIB"""
        insights = []
        
        if direction == 'Crescente' and confidence > 0.6:
            if change_pct > 10:
                insights.append(
                    "üöÄ **Crescimento Acelerado:** PIB em forte expans√£o indica "
                    "aquecimento significativo da economia e melhora do emprego."
                )
            else:
                insights.append(
                    "üìà **Crescimento Sustentado:** PIB em expans√£o moderada indica "
                    "crescimento saud√°vel da atividade econ√¥mica."
                )
        elif direction == 'Decrescente' and confidence > 0.6:
            if abs(change_pct) > 5:
                insights.append(
                    "üî¥ **Recess√£o Iminente:** Queda acentuada do PIB pode sinalizar "
                    "recess√£o t√©cnica. Monitorar indicadores de emprego e renda."
                )
            else:
                insights.append(
                    "‚ö†Ô∏è **Desacelera√ß√£o Econ√¥mica:** PIB em tend√™ncia de queda suave "
                    "indica arrefecimento da atividade."
                )
        elif direction == 'Est√°vel':
            insights.append(
                "üìä **Estagna√ß√£o Econ√¥mica:** PIB sem crescimento pode indicar "
                "economia em transi√ß√£o ou falta de dinamismo."
            )
        
        return insights
    
    def _cambio_specific_insights(self, last_value: float, direction: str, 
                                change_pct: float) -> List[str]:
        """Insights espec√≠ficos para C√¢mbio USD/BRL"""
        insights = []
        
        if last_value > 6.5:
            insights.append(
                "üí± **Real Muito Desvalorizado:** C√¢mbio elevado pressiona infla√ß√£o "
                "via importados, mas beneficia exportadores."
            )
        elif last_value < 4.0:
            insights.append(
                "üí± **Real Muito Valorizado:** C√¢mbio baixo beneficia controle "
                "inflacion√°rio, mas prejudica competitividade externa."
            )
        elif 5.0 <= last_value <= 5.5:
            insights.append(
                "üí± **C√¢mbio Equilibrado:** Real em faixa considerada neutra "
                "para a economia brasileira."
            )
        
        # Insights sobre din√¢mica cambial
        recent_change = abs(change_pct)
        if recent_change > 25:
            if change_pct > 0:
                insights.append(
                    "üí± **Deprecia√ß√£o Severa:** Real em queda acentuada - risco "
                    "inflacion√°rio alto via importados e poss√≠vel necessidade "
                    "de interven√ß√£o do BC."
                )
            else:
                insights.append(
                    "üí± **Aprecia√ß√£o Forte:** Real valorizando rapidamente - "
                    "beneficia controle da infla√ß√£o, mas pode prejudicar exporta√ß√µes."
                )
        elif recent_change > 15:
            insights.append(
                "üí± **Volatilidade Cambial Significativa:** Movimentos cambiais "
                "acentuados podem exigir aten√ß√£o especial do Banco Central."
            )
        
        return insights
    
    def _divida_specific_insights(self, last_value: float, direction: str, 
                                confidence: float) -> List[str]:
        """Insights espec√≠ficos para D√≠vida/PIB"""
        insights = []
        
        if last_value > 85:
            insights.append(
                "üìä **D√≠vida Muito Elevada:** D√≠vida/PIB acima de 85% representa "
                "risco fiscal significativo e limita severamente espa√ßo para "
                "pol√≠ticas antic√≠clicas."
            )
        elif last_value > 75:
            insights.append(
                "‚ö†Ô∏è **D√≠vida Elevada:** D√≠vida/PIB acima de 75% limita espa√ßo "
                "fiscal e pode pressionar juros de longo prazo."
            )
        elif last_value < 60:
            insights.append(
                "‚úÖ **D√≠vida Controlada:** D√≠vida/PIB em n√≠vel sustent√°vel "
                "permite margem para pol√≠ticas fiscais expansionistas."
            )
        
        # Insights sobre trajet√≥ria fiscal
        if direction == 'Crescente' and confidence > 0.6:
            insights.append(
                "üìà **Deteriora√ß√£o Fiscal:** Crescimento da d√≠vida p√∫blica exige "
                "medidas urgentes de consolida√ß√£o fiscal para evitar crise."
            )
        elif direction == 'Decrescente' and confidence > 0.6:
            insights.append(
                "‚úÖ **Melhora Fiscal:** Redu√ß√£o da d√≠vida p√∫blica indica disciplina "
                "fiscal e melhora da sustentabilidade das contas p√∫blicas."
            )
        
        return insights
    
    def _generate_seasonal_insights(self, indicator_name: str, 
                                  trend_analysis: Dict[str, any]) -> List[str]:
        """Gera insights sobre padr√µes sazonais"""
        insights = []
        
        seasonal_pattern = trend_analysis.get('seasonal_pattern', 'N√£o detectado')
        seasonal_strength = trend_analysis.get('seasonal_strength', 0)
        seasonal_period = trend_analysis.get('seasonal_period', None)
        
        if seasonal_pattern == 'Detectado' and seasonal_strength > 0.4:
            if seasonal_period and seasonal_period <= 12:
                insights.append(
                    f"üîÑ **Padr√£o Sazonal Detectado:** {indicator_name} apresenta "
                    f"sazonalidade com per√≠odo de {seasonal_period} meses "
                    f"(for√ßa: {seasonal_strength:.1%}). Considere este padr√£o "
                    f"em an√°lises e previs√µes."
                )
        elif seasonal_pattern == 'Detectado' and seasonal_strength > 0.2:
            insights.append(
                f"üìÖ **Sazonalidade Fraca:** {indicator_name} mostra sinais de "
                f"padr√£o sazonal moderado. Pode influenciar comportamento "
                f"em certos per√≠odos do ano."
            )
        
        return insights
    
    def _generate_outlier_insights(self, indicator_name: str, 
                                 data: pd.DataFrame) -> List[str]:
        """Gera insights sobre outliers nos dados"""
        insights = []
        
        if data.empty:
            return insights
        
        # Detectar outliers usando m√©todo IQR simples
        values = data['value'].dropna()
        if len(values) < 4:
            return insights
        
        Q1 = values.quantile(0.25)
        Q3 = values.quantile(0.75)
        IQR = Q3 - Q1
        
        if IQR > 1e-10:
            lower_bound = Q1 - 1.5 * IQR
            upper_bound = Q3 + 1.5 * IQR
            
            outliers = []
            for idx, row in data.iterrows():
                value = row['value']
                if pd.notna(value) and (value < lower_bound or value > upper_bound):
                    outliers.append({
                        'date': row['date'],
                        'value': value,
                        'type': 'Alto' if value > upper_bound else 'Baixo'
                    })
            
            outlier_ratio = len(outliers) / len(data)
            
            if outlier_ratio > 0.2:
                insights.append(
                    f"üîç **Per√≠odo Excepcional:** {len(outliers)} valores at√≠picos "
                    f"({outlier_ratio:.1%}) em {indicator_name} sugerem m√∫ltiplos "
                    f"eventos extraordin√°rios ou mudan√ßa estrutural no indicador."
                )
            elif outlier_ratio > 0.1:
                insights.append(
                    f"‚ö° **Eventos Significativos:** {len(outliers)} outliers detectados "
                    f"em {indicator_name} - poss√≠veis choques externos ou mudan√ßas "
                    f"de pol√≠tica que afetaram o comportamento normal."
                )
            elif outliers:
                recent_outlier = max(outliers, key=lambda x: x['date'])
                date_str = recent_outlier['date'].strftime('%m/%Y')
                insights.append(
                    f"üìä **Valor At√≠pico Recente:** {indicator_name} apresentou pico "
                    f"em {date_str} ({recent_outlier['value']:.2f}) - pode indicar "
                    f"evento pontual ou erro de medi√ß√£o."
                )
        
        return insights
    
    def _generate_economic_context_insights(self, indicator: str, 
                                          trend_analysis: Dict[str, any]) -> List[str]:
        """Gera insights de contexto econ√¥mico mais amplo"""
        insights = []
        
        direction = trend_analysis.get('direction', 'N/A')
        confidence = trend_analysis.get('confidence', 0)
        volatility = trend_analysis.get('volatility', 0)
        
        # Insights contextuais baseados no indicador e condi√ß√µes
        if indicator in ['ipca', 'selic'] and confidence > 0.6:
            if direction == 'Crescente' and indicator == 'ipca':
                insights.append(
                    "üîó **Implica√ß√£o Monet√°ria:** Tend√™ncia inflacion√°ria crescente "
                    "pode pressionar BC a elevar SELIC, impactando crescimento "
                    "e mercado de capitais."
                )
            elif direction == 'Crescente' and indicator == 'selic':
                insights.append(
                    "üîó **Implica√ß√£o Econ√¥mica:** Eleva√ß√£o da SELIC pode desacelerar "
                    "crescimento, mas √© necess√°ria para controle inflacion√°rio."
                )
        
        if indicator == 'pib' and volatility > 20:
            insights.append(
                "üåä **Instabilidade Macroecon√¥mica:** Alta volatilidade do PIB "
                "pode refletir incertezas pol√≠ticas, choques externos ou "
                "mudan√ßas estruturais na economia."
            )
        
        if indicator == 'cambio_dolar' and volatility > 25:
            insights.append(
                "üåç **Press√µes Externas:** Alta volatilidade cambial pode estar "
                "relacionada a fatores globais, pol√≠tica dom√©stica ou fluxos "
                "de capital especulativo."
            )
        
        # Insight sobre qualidade dos dados para an√°lise
        data_points = trend_analysis.get('data_points', 0)
        if data_points < 12:
            insights.append(
                f"‚ö†Ô∏è **Limita√ß√£o Anal√≠tica:** Com apenas {data_points} pontos de dados, "
                f"a an√°lise tem limita√ß√µes. Mais dados hist√≥ricos melhorariam "
                f"a precis√£o das conclus√µes."
            )
        
        return insights
    
    def _prioritize_insights(self, insights: List[str]) -> List[str]:
        """
        Prioriza insights por relev√¢ncia e remove duplicatas
        
        Args:
            insights: Lista de insights n√£o ordenados
            
        Returns:
            List[str]: Insights priorizados
        """
        if not insights:
            return []
        
        # Remover duplicatas mantendo ordem
        unique_insights = []
        seen = set()
        for insight in insights:
            # Usar primeiras 50 caracteres como chave para detectar duplicatas similares
            key = insight[:50].lower()
            if key not in seen:
                unique_insights.append(insight)
                seen.add(key)
        
        # Sistema de prioriza√ß√£o baseado em palavras-chave
        priority_scores = []
        
        for insight in unique_insights:
            score = 0
            insight_lower = insight.lower()
            
            # Prioridade alta para alertas cr√≠ticos
            if any(word in insight_lower for word in ['cr√≠tica', 'emergencial', 'severa', 'recess√£o']):
                score += 10
            
            # Prioridade m√©dia-alta para avisos importantes
            if any(word in insight_lower for word in ['alerta', 'aten√ß√£o', 'significativo', 'agressiv']):
                score += 7
            
            # Prioridade m√©dia para insights contextuais
            if any(word in insight_lower for word in ['implica√ß√£o', 'contexto', 'considera']):
                score += 5
            
            # Prioridade para insights com n√∫meros espec√≠ficos
            if any(char.isdigit() for char in insight):
                score += 3
            
            # Prioridade para insights sobre tend√™ncia principal
            if any(word in insight_lower for word in ['tend√™ncia', 'crescimento', 'queda']):
                score += 4
            
            # B√¥nus para insights informativos
            if any(word in insight_lower for word in ['meta atingida', 'controlado', 'est√°vel']):
                score += 2
            
            priority_scores.append((score, insight))
        
        # Ordenar por score (maior primeiro) e retornar apenas os insights
        priority_scores.sort(key=lambda x: x[0], reverse=True)
        
        return [insight for score, insight in priority_scores]
    
    def generate_comparative_insights(self, indicators: List[str], 
                                    data_dict: Dict[str, pd.DataFrame],
                                    trend_analyses: Dict[str, Dict]) -> List[str]:
        """
        Gera insights comparativos entre m√∫ltiplos indicadores
        
        Args:
            indicators: Lista de indicadores para comparar
            data_dict: Dicion√°rio com dados de cada indicador
            trend_analyses: Dicion√°rio com an√°lises de tend√™ncia
            
        Returns:
            List[str]: Insights comparativos
        """
        if len(indicators) < 2:
            return []
        
        insights = []
        
        # Compara√ß√µes espec√≠ficas entre pares importantes
        if 'ipca' in indicators and 'selic' in indicators:
            insights.extend(self._compare_ipca_selic(trend_analyses))
        
        if 'pib' in indicators and 'selic' in indicators:
            insights.extend(self._compare_pib_selic(trend_analyses))
        
        if 'cambio_dolar' in indicators and 'ipca' in indicators:
            insights.extend(self._compare_cambio_ipca(trend_analyses))
        
        # An√°lise de correla√ß√µes gerais
        insights.extend(self._analyze_general_correlations(indicators, trend_analyses))
        
        return insights[:3]  # M√°ximo 3 insights comparativos
    
    def _compare_ipca_selic(self, trend_analyses: Dict[str, Dict]) -> List[str]:
        """Compara IPCA e SELIC"""
        insights = []
        
        ipca_analysis = trend_analyses.get('ipca', {})
        selic_analysis = trend_analyses.get('selic', {})
        
        ipca_direction = ipca_analysis.get('direction', 'N/A')
        selic_direction = selic_analysis.get('direction', 'N/A')
        
        if ipca_direction == 'Crescente' and selic_direction == 'Decrescente':
            insights.append(
                "üö® **Desalinhamento Monet√°rio:** Infla√ß√£o subindo enquanto SELIC cai. "
                "Poss√≠vel perda de controle inflacion√°rio - BC pode precisar reverter pol√≠tica."
            )
        elif ipca_direction == 'Decrescente' and selic_direction == 'Crescente':
            insights.append(
                "‚úÖ **Pol√≠tica Eficaz:** SELIC subindo com infla√ß√£o controlada. "
                "Pol√≠tica monet√°ria demonstrando efic√°cia no controle de pre√ßos."
            )
        elif ipca_direction == 'Crescente' and selic_direction == 'Crescente':
            insights.append(
                "‚öîÔ∏è **Combate √† Infla√ß√£o:** BC elevando juros para conter press√µes "
                "inflacion√°rias. Acompanhar efic√°cia das medidas nos pr√≥ximos meses."
            )
        
        return insights
    
    def _compare_pib_selic(self, trend_analyses: Dict[str, Dict]) -> List[str]:
        """Compara PIB e SELIC"""
        insights = []
        
        pib_analysis = trend_analyses.get('pib', {})
        selic_analysis = trend_analyses.get('selic', {})
        
        pib_direction = pib_analysis.get('direction', 'N/A')
        selic_direction = selic_analysis.get('direction', 'N/A')
        
        if pib_direction == 'Decrescente' and selic_direction == 'Crescente':
            insights.append(
                "üìâ **Dilema de Pol√≠tica:** PIB caindo com juros altos. "
                "Economia sob press√£o de pol√≠tica restritiva - BC precisa "
                "balancear crescimento e infla√ß√£o."
            )
        elif pib_direction == 'Crescente' and selic_direction == 'Decrescente':
            insights.append(
                "üöÄ **Est√≠mulo Efetivo:** PIB crescendo com juros baixos. "
                "Pol√≠tica expansionista funcionando, mas aten√ß√£o √† infla√ß√£o."
            )
        
        return insights
    
    def _compare_cambio_ipca(self, trend_analyses: Dict[str, Dict]) -> List[str]:
        """Compara C√¢mbio e IPCA"""
        insights = []
        
        cambio_analysis = trend_analyses.get('cambio_dolar', {})
        ipca_analysis = trend_analyses.get('ipca', {})
        
        cambio_change = cambio_analysis.get('change_pct', 0)
        ipca_direction = ipca_analysis.get('direction', 'N/A')
        
        if cambio_change > 15 and ipca_direction == 'Crescente':
            insights.append(
                "üåä **Press√£o Cambial-Inflacion√°ria:** Desvaloriza√ß√£o do real "
                "amplificando press√µes inflacion√°rias via importados. "
                "Ciclo de risco para estabilidade de pre√ßos."
            )
        elif cambio_change < -10 and ipca_direction == 'Decrescente':
            insights.append(
                "üí± **Al√≠vio Cambial:** Aprecia√ß√£o do real contribuindo para "
                "controle inflacion√°rio atrav√©s de importados mais baratos."
            )
        
        return insights
    
    def _analyze_general_correlations(self, indicators: List[str], 
                                    trend_analyses: Dict[str, Dict]) -> List[str]:
        """Analisa correla√ß√µes gerais entre indicadores"""
        insights = []
        
        # Contar dire√ß√µes predominantes
        directions = [trend_analyses.get(ind, {}).get('direction', 'N/A') for ind in indicators]
        direction_counts = {d: directions.count(d) for d in set(directions)}
        
        if direction_counts.get('Crescente', 0) >= len(indicators) * 0.7:
            insights.append(
                "üìà **Movimento Sincronizado Ascendente:** Maioria dos indicadores "
                "em tend√™ncia de alta. Poss√≠vel per√≠odo de aquecimento econ√¥mico geral."
            )
        elif direction_counts.get('Decrescente', 0) >= len(indicators) * 0.7:
            insights.append(
                "üìâ **Movimento Sincronizado Descendente:** Maioria dos indicadores "
                "em queda. Poss√≠vel per√≠odo de desacelera√ß√£o econ√¥mica ampla."
            )
        elif direction_counts.get('Est√°vel', 0) >= len(indicators) * 0.6:
            insights.append(
                "üìä **Estabilidade Generalizada:** Maioria dos indicadores est√°vel. "
                "Economia em per√≠odo de consolida√ß√£o ou transi√ß√£o."
            )
        
        return insights